plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    // modrinth publishing
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version
group = project.maven_group

repositories {
    // revelationary
    exclusiveContent {
        forRepository {
            maven {
                name = "Modrinth"
                url = "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    // gekolib
    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }
    // lavender, owo-lib
    maven { url 'https://maven.wispforest.io' }
    // devAuth
    maven { url = "https://pkgs.dev.azure.com/djtheredstoner/DevAuth/_packaging/public/maven/v1" }
}

dependencies {
        // Minecraft.
    minecraft ("com.mojang:minecraft:${project.minecraft_version}")
        // Yarn mappings.
    mappings ("net.fabricmc:yarn:${project.yarn_mappings}:v2")
        // Fabric Loader.
    modImplementation ("net.fabricmc:fabric-loader:${project.loader_version}")

    // Mod dependencies.
        // Fabric API.
    modImplementation ("net.fabricmc.fabric-api:fabric-api:${project.fabric_version}")
        // Geckolib
    modImplementation ("software.bernie.geckolib:geckolib-fabric-${project.geckolib_version}")
        // Revelationary
    //modImplementation ("maven.modrinth:revelationary:${project.revelationary_version}")
        // Owo-lib
    annotationProcessor modImplementation ("io.wispforest:owo-lib:${project.owo_version}")
    include ("io.wispforest:owo-sentinel:${project.owo_version}")
    // Lavender
    include modImplementation ("io.wispforest:lavender:${project.lavender_version}")
        // ModMenu
    modImplementation ("maven.modrinth:modmenu:${project.modmenu_version}")

    // Dev Stuff
        // DevAuth
    modRuntimeOnly ("me.djtheredstoner:DevAuth-fabric:${project.devauth_version}")
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
        }
    }
    repositories {
    }
}

loom {
    runs {
        datagenClient {
            inherit client
            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
            vmArg "-Dfabric-api.datagen.modid=${modid}"

            runDir "build/datagen"
        }
    }
}
sourceSets {
    main {
        resources {
            srcDirs += [
                    'src/main/generated'
            ]
        }
    }
}

import com.modrinth.minotaur.dependencies.ModDependency

modrinth {
    String tokenString = ""
    try {
        tokenString = providers.environmentVariable('MODRINTH_TOKEN').get()
    } catch (Exception e) {
        println("Modrinth token not found in environment variables")
    }
    if (tokenString != "") {
        token = tokenString
    }
    projectId = project.project_id // The ID of your Modrinth project. Slugs will not work.
    versionNumber = project.mod_version // The (preferably SemVer) version of the mod. If not specified, it'll use the `version` declaration
    versionName = "${project.archivesBaseName}-${project.mod_version}" // The version title. If not specified, it'll use the version number
    uploadFile = remapJar // Tells Minotaur to use the remapped jar
    gameVersions = [project.minecraft_version] // An array of game versions the version supports
    loaders = ['fabric', 'quilt'] // Self-explanatory.
    dependencies = [
            // Fabric API
            new ModDependency('P7dR8mSH', 'required'),
            // Revelationary
            new ModDependency('eXrl5E3G', 'required'),
            // Geckolib
            new ModDependency('8BmcQJ2H', 'required'),
            // owo-lib
            new ModDependency('ccKDOlHs', 'required'),
            // Lavender
            // TODO: Add lavender
            // ModMenu
            new ModDependency('mOgUt4GM', 'required')


    ]
}
